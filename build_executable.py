#!/usr/bin/env python3
"""
Script de construction pour El Programming Language
Cr√©e un ex√©cutable distributable
"""

import os
import sys
import platform
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, cwd=None):
    """Ex√©cuter une commande syst√®me"""
    print(f"üîß Ex√©cution: {cmd}")
    result = subprocess.run(cmd, shell=True, cwd=cwd, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"‚ùå Erreur: {result.stderr}")
        return False
    if result.stdout.strip():
        print(f"üìù {result.stdout}")
    return True

def check_dependencies():
    """V√©rifier que les d√©pendances sont install√©es"""
    print("üîç V√©rification des d√©pendances...")
    
    dependencies = ['pyinstaller']
    missing = []
    
    for dep in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} install√©")
        except ImportError:
            missing.append(dep)
            print(f"‚ùå {dep} manquant")
    
    if missing:
        print(f"\nüì¶ Installation des d√©pendances manquantes...")
        for dep in missing:
            if not run_command(f"pip install {dep}"):
                print(f"Impossible d'installer {dep}")
                return False
    
    return True

def clean_build():
    """Nettoyer les anciens builds"""
    print("üßπ Nettoyage des anciens builds...")
    
    dirs_to_clean = ['build', 'dist', '__pycache__']
    files_to_clean = ['*.spec']
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"üóëÔ∏è  Supprim√©: {dir_name}")
    
    # Nettoyer les fichiers .pyc r√©cursivement
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.pyc'):
                os.remove(os.path.join(root, file))

def create_examples():
    """Cr√©er des fichiers d'exemple"""
    print("üìù Cr√©ation des fichiers d'exemple...")
    
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    
    # Hello World
    hello_world = """program hello_world {
    show "Hello, World!";
    show "Bienvenue dans El Programming Language!";
}"""
    
    # Calculatrice
    calculator = """program calculator {
    function add(a: integer, b: integer): integer {
        return a + b;
    }
    
    function multiply(a: integer, b: integer): integer {
        return a * b;
    }
    
    var x: integer = 10;
    var y: integer = 5;
    
    show "Calculatrice El";
    show x + " + " + y + " = " + add(x, y);
    show x + " * " + y + " = " + multiply(x, y);
}"""
    
    # Fibonacci
    fibonacci = """program fibonacci {
    function fib(n: integer): integer {
        if n <= 1 {
            return n;
        }
        return fib(n - 1) + fib(n - 2);
    }
    
    show "S√©quence de Fibonacci:";
    for i: integer = 0; i < 10; i = i + 1 {
        show "F(" + i + ") = " + fib(i);
    }
}"""
    
    # √âcrire les exemples
    examples = {
        "hello_world.el": hello_world,
        "calculator.el": calculator,
        "fibonacci.el": fibonacci
    }
    
    for filename, content in examples.items():
        with open(examples_dir / filename, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ Cr√©√©: examples/{filename}")

def build_executable():
    """Construire l'ex√©cutable avec PyInstaller"""
    print("üèóÔ∏è  Construction de l'ex√©cutable...")
    
    system = platform.system().lower()
    
    # Commande PyInstaller adapt√©e au syst√®me
    base_cmd = [
        "pyinstaller",
        "--onefile",
        "--name", "el",
        "--console",
        "--add-data", "compiler;compiler" if system == "windows" else "compiler:compiler",
        "--add-data", "utils;utils" if system == "windows" else "utils:utils", 
        "--add-data", "system;system" if system == "windows" else "system:system",
        "--add-data", "examples;examples" if system == "windows" else "examples:examples",
        "--hidden-import", "compiler",
        "--hidden-import", "utils", 
        "--hidden-import", "system",
        "el_standalone.py"
    ]
    
    cmd = " ".join(base_cmd)
    return run_command(cmd)

def create_portable_package():
    """Cr√©er un package portable"""
    print("üì¶ Cr√©ation du package portable...")
    
    # Cr√©er le dossier portable
    portable_dir = Path("dist/el-portable")
    portable_dir.mkdir(exist_ok=True)
    
    # D√©terminer le nom de l'ex√©cutable
    exe_name = "el.exe" if platform.system().lower() == "windows" else "el"
    exe_path = Path("dist") / exe_name
    
    if exe_path.exists():
        # Copier l'ex√©cutable
        shutil.copy(exe_path, portable_dir)
        print(f"‚úÖ Copi√©: {exe_name}")
        
        # Copier les exemples
        if Path("examples").exists():
            shutil.copytree("examples", portable_dir / "examples", dirs_exist_ok=True)
            print("‚úÖ Copi√©: examples/")
        
        # Cr√©er le README
        readme_content = f"""# El Programming Language - Version Portable v1.0.0

## üöÄ Installation
1. Extrayez ce dossier o√π vous voulez sur votre ordinateur
2. (Optionnel) Ajoutez le dossier √† votre variable PATH
3. Utilisez {exe_name} depuis la ligne de commande

## üìñ Utilisation

### Commandes de base:
- `{exe_name} --help`              : Afficher l'aide
- `{exe_name} --version`           : Afficher la version
- `{exe_name} fichier.el`          : Ex√©cuter un fichier El
- `{exe_name} -i`                  : Mode interactif (REPL)
- `{exe_name} -c "code"`           : Ex√©cuter du code directement

### Exemples:
```bash
# Ex√©cuter un exemple
{exe_name} examples/hello_world.el

# Mode interactif
{exe_name} -i

# Code en ligne de commande
{exe_name} -c "program test {{ show 'Hello El!'; }}"
```

## üìù Syntaxe El Language

### Variables:
```el
var nom: string = "El";
var age: integer = 1;
var prix: float = 19.99;
var actif: boolean = true;
```

### Fonctions:
```el
function saluer(nom: string): string {{
    return "Bonjour " + nom + "!";
}}
```

### Boucles:
```el
for i: integer = 0; i < 5; i = i + 1 {{
    show i;
}}

while condition do {{
    // code
}}
```

### Conditions:
```el
if x > 5 {{
    show "x est grand";
}} elif x === 5 {{
    show "x √©gale 5";
}} else {{
    show "x est petit";
}}
```

## üìö Exemples inclus
- `hello_world.el` : Programme "Hello World"
- `calculator.el`  : Calculatrice simple
- `fibonacci.el`   : S√©quence de Fibonacci

## üåê Documentation et Support
- GitHub:https://github.com/Daftyon/Easier-language
- Documentation: https://el-language.org
- Issues:https://github.com/Daftyon/Easier-language/issues

## üìÑ Licence
El Programming Language est distribu√© sous licence MIT.

---
Cr√©√© avec ‚ù§Ô∏è par l'√©quipe El Language
"""
        
        with open(portable_dir / "README.txt", "w", encoding="utf-8") as f:
            f.write(readme_content)
        print("‚úÖ Cr√©√©: README.txt")
        
        # Cr√©er le script de lancement (Windows)
        if platform.system().lower() == "windows":
            batch_content = f"""@echo off
echo El Programming Language - Portable
echo Tapez 'el --help' pour l'aide
echo.
cmd /k
"""
            with open(portable_dir / "el-console.bat", "w") as f:
                f.write(batch_content)
            print("‚úÖ Cr√©√©: el-console.bat")
        
        # Cr√©er le ZIP portable
        print("üóúÔ∏è  Cr√©ation de l'archive ZIP...")
        zip_name = f"el-portable-{platform.system().lower()}-{platform.machine().lower()}"
        shutil.make_archive(f"dist/{zip_name}", "zip", "dist", "el-portable")
        print(f"‚úÖ Archive cr√©√©e: dist/{zip_name}.zip")
        
        return True
    else:
        print(f"‚ùå Ex√©cutable non trouv√©: {exe_path}")
        return False

def create_installer_script():
    """Cr√©er un script d'installation pour Windows"""
    if platform.system().lower() != "windows":
        return True
    
    print("üìã Cr√©ation du script d'installation Windows...")
    
    install_script = """@echo off
echo ================================
echo   El Programming Language
echo   Installation Windows
echo ================================
echo.

REM V√©rifier les privil√®ges administrateur
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo ATTENTION: Privil√®ges administrateur requis pour installation syst√®me
    echo Installation dans le r√©pertoire utilisateur...
    set "INSTALL_DIR=%USERPROFILE%\\El"
) else (
    set "INSTALL_DIR=C:\\Program Files\\El"
)

echo Installation vers: %INSTALL_DIR%
echo.

REM Cr√©er le r√©pertoire
if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"

REM Copier les fichiers
copy "el.exe" "%INSTALL_DIR%\\" >nul
xcopy "examples" "%INSTALL_DIR%\\examples\\" /E /I /Q >nul
copy "README.txt" "%INSTALL_DIR%\\" >nul

REM Ajouter au PATH utilisateur
echo Ajout au PATH...
setx PATH "%PATH%;%INSTALL_DIR%" >nul

echo.
echo ================================
echo   Installation termin√©e!
echo ================================
echo.
echo El est maintenant install√© dans: %INSTALL_DIR%
echo Red√©marrez votre invite de commande et tapez 'el --version'
echo.
pause
"""
    
    with open("dist/install-windows.bat", "w") as f:
        f.write(install_script)
    print("‚úÖ Cr√©√©: install-windows.bat")
    
    return True

def show_build_summary():
    """Afficher un r√©sum√© de la construction"""
    print("\n" + "="*50)
    print("üéâ CONSTRUCTION TERMIN√âE AVEC SUCC√àS!")
    print("="*50)
    
    dist_dir = Path("dist")
    if dist_dir.exists():
        print("\nüì¶ Fichiers cr√©√©s:")
        total_size = 0
        
        for file_path in sorted(dist_dir.rglob("*")):
            if file_path.is_file():
                size = file_path.stat().st_size
                total_size += size
                size_mb = size / 1024 / 1024
                
                # Emoji selon le type de fichier
                if file_path.suffix == ".exe":
                    emoji = "‚ö°"
                elif file_path.suffix == ".zip":
                    emoji = "üì¶"
                elif file_path.suffix == ".bat":
                    emoji = "üîß"
                else:
                    emoji = "üìÑ"
                
                print(f"  {emoji} {file_path.name} ({size_mb:.1f} MB)")
        
        print(f"\nüìä Taille totale: {total_size / 1024 / 1024:.1f} MB")
    
    print(f"\nüñ•Ô∏è  Plateforme: {platform.system()} {platform.machine()}")
    print(f"üêç Python: {sys.version.split()[0]}")
    
    print("\nüöÄ Pr√™t pour distribution!")
    print("   - Testez l'ex√©cutable: dist/el.exe --version")
    print("   - Distribuez le ZIP portable")
    print("   - Partagez avec vos utilisateurs!")

def main():
    """Fonction principale"""
    print("üèóÔ∏è  CONSTRUCTION D'EL PROGRAMMING LANGUAGE")
    print("="*50)
    
    # V√©rifications pr√©liminaires
    if not check_dependencies():
        print("‚ùå Impossible de continuer sans les d√©pendances")
        return 1
    
    # Nettoyer
    clean_build()
    
    # Cr√©er les exemples
    create_examples()
    
    # Construire l'ex√©cutable
    if not build_executable():
        print("‚ùå √âchec de la construction de l'ex√©cutable")
        return 1
    
    # Cr√©er le package portable
    if not create_portable_package():
        print("‚ùå √âchec de la cr√©ation du package portable")
        return 1
    
    # Cr√©er le script d'installation
    create_installer_script()
    
    # Afficher le r√©sum√©
    show_build_summary()
    
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå Construction interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
