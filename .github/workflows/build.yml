name: Build El Programming Language

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            ext: .exe
            icon: el_icone.ico
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ""
            icon: el_icone.ico
          - os: macos-latest
            platform: macos
            arch: x64
            ext: ""
            icon: el_icone.ico

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pillow

    - name: Create examples directory
      run: |
        mkdir -p examples

    - name: Create hello_world example
      shell: bash
      run: |
        cat > examples/hello_world.el << 'EOF'
        program hello_world {
            show "Hello, World!";
            show "Welcome to El Programming Language!";
        }
        EOF

    - name: Create calculator example
      shell: bash
      run: |
        cat > examples/calculator.el << 'EOF'
        program calculator {
            function add(a: integer, b: integer): integer {
                return a + b;
            }
            
            var x: integer = 10;
            var y: integer = 5;
            
            show "El Calculator";
            show x + " + " + y + " = " + add(x, y);
        }
        EOF

    - name: Create fibonacci example
      shell: bash
      run: |
        cat > examples/fibonacci.el << 'EOF'
        program fibonacci {
            function fib(n: integer): integer {
                if n <= 1 {
                    return n;
                }
                return fib(n - 1) + fib(n - 2);
            }
            
            show "Fibonacci: " + fib(7);
        }
        EOF

    - name: Verify project structure
      shell: bash
      run: |
        echo "Project structure:"
        find . -name "*.py" -type f | head -20
        ls -la compiler/ utils/ system/ examples/ || true

    - name: Build executable (Windows)
      if: matrix.platform == 'windows'
      run: |
        pyinstaller --onefile --name el --console --icon="${{ matrix.icon }}" --add-data "compiler;compiler" --add-data "utils;utils" --add-data "system;system" --add-data "examples;examples" --hidden-import compiler --hidden-import utils --hidden-import system el_standalone.py

    - name: Build executable (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        pyinstaller --onefile --name el --console --icon="${{ matrix.icon }}" --add-data "compiler:compiler" --add-data "utils:utils" --add-data "system:system" --add-data "examples:examples" --hidden-import compiler --hidden-import utils --hidden-import system el_standalone.py

    - name: Test executable
      shell: bash
      run: |
        ls -la dist/
        ./dist/el${{ matrix.ext }} --version || true
        ./dist/el${{ matrix.ext }} --help || true

    - name: Create release package
      shell: bash
      run: |
        cd dist
        if [ "${{ matrix.platform }}" = "windows" ]; then
          7z a ../el-${{ matrix.platform }}-${{ matrix.arch }}.zip el.exe
        else
          tar -czf ../el-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz el
        fi
        cd ..

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: el-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/el${{ matrix.ext }}
          examples/

    - name: Upload release packages
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: |
          el-*.zip
          el-*.tar.gz

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest

    - name: Run basic tests
      shell: bash
      run: |
        echo "Running basic syntax tests..."
        python -c "from compiler.lexer import Lexer; print('✅ Lexer import OK')"
        python -c "from compiler.parser import Parser; print('✅ Parser import OK')"
        python -c "from compiler.main import El; print('✅ Main compiler OK')"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create release notes
      run: |
        cat > release_notes.md << 'EOF'
        # El Programming Language Release ${{ github.ref_name }}
        
        ## 🚀 What's New
        - Cross-platform executable builds
        - Improved performance and stability
        - Enhanced error handling
        - Updated examples
        
        ## 📦 Downloads
        
        ### Windows
        - `el-windows-x64.zip` - Windows 64-bit executable
        
        ### Linux
        - `el-linux-x64.tar.gz` - Linux 64-bit executable
        
        ### macOS
        - `el-macos-x64.tar.gz` - macOS 64-bit executable
        
        ## 🔧 Installation
        
        1. Download the appropriate package for your platform
        2. Extract the archive
        3. Run `el --version` to verify installation
        4. Check out the `examples/` folder for sample code
        
        ## 📚 Documentation
        
        Visit our [GitHub repository](https://github.com/Daftyon/Easier-language) for complete documentation.
        
        ## 🐛 Bug Reports
        
        Report issues at: https://github.com/Daftyon/Easier-language/issues
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-packages/*
        body_path: release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build, test]
    if: always()

    steps:
    - name: Notify success
      if: needs.build.result == 'success' && needs.test.result == 'success'
      run: |
        echo "✅ Build completed successfully!"
        echo "All platforms built and tested successfully."

    - name: Notify failure
      if: needs.build.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Build failed!"
        echo "Check the logs for details."
        exit 1